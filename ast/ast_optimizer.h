/*
  Copyright 2024 Igor Wodiany
  Copyright 2024 The University of Manchester

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this trace except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

#pragma once

#include "ast/ast.h"

/**
 * Optimize the AST IR by applying following optimizations:
 *
 * WEAK CONSTANT AND COPY PROPAGATION - This optimizations performs propagation of temporary variables relying on the
 * fact they cannot outlive the basic block. This allows us to perform those transformations without performing a
 * data-flow analysis on the function.
 *
 * CONSTANT FOLDING - Simplify binary operations where both operands are known at the compile-time.
 *
 * SEMANTIC DEAD CODE ELIMINATION - Remove code that is known to be dead, as it was generated by QEMU, but we
 * know we do not use it (e.g., any manipulation to LR and PC).
 *
 * WEAK DEAD CODE ELIMINATION - Remove code that becomes dead after weak constant and copy propagation.
 *
 * @param translation_unit Translation unit with AST IR to optimize
 */
void optimize_ast(ast_translation_unit *translation_unit);
